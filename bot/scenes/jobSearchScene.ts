import {Markup, Scenes} from "telegraf";
import axios from "axios";
import {HHRegion, JobSearchContext, JobSearchSession} from "../types";
import {buildKeyboardButtons, getHHRegions, hasCallbackData} from "../utils/keyboardUtils";
import {formatSalary} from "../utils/salaryUtils";
import {getUserResumes, searchVacancies} from "../utils/apiUtils";

export const jobSearchWizard = new Scenes.WizardScene<JobSearchContext>(
    "job-search-wizard",

    // –®–∞–≥ 1 ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ
    async (ctx) => {
        const telegramId = ctx.from?.id;
        if (!telegramId) {
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.");
            return ctx.scene.leave();
        }

        try {
            const resumes = await getUserResumes(telegramId);

            if (!Array.isArray(resumes) || !resumes.length) {
                await ctx.reply("–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.");
                return ctx.scene.leave();
            }

            const keyboard = buildKeyboardButtons(resumes, "select_resume_");
            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ:", keyboard);
            return ctx.wizard.next();
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ:", err);
            await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return ctx.scene.leave();
        }
    },

    // –®–∞–≥ 2 ‚Äî –≤—ã–±–æ—Ä —Ä–µ–∑—é–º–µ
    async (ctx) => {
        const cb = ctx.callbackQuery;
        if (!hasCallbackData(cb) || !cb.data.startsWith("select_resume_")) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É.");
            return;
        }

        const selectedResumeId = cb.data.replace("select_resume_", "");
        const session = ctx.session as JobSearchSession;
        session.selectedResumeId = selectedResumeId;

        await ctx.answerCbQuery();

        try {
            const regions = await getHHRegions();
            const countries = regions.filter((r: any) => !r.parent_id);

            const keyboard = buildKeyboardButtons(countries, "select_region_", 3);
            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É / —Ä–µ–≥–∏–æ–Ω:", keyboard);
            return ctx.wizard.next();
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤:", err);
            await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return ctx.scene.leave();
        }
    },

    // –®–∞–≥ 3 ‚Äî –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
    async (ctx) => {
        const cb = ctx.callbackQuery;
        if (!hasCallbackData(cb) || !cb.data.startsWith("select_region_")) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É.");
            return;
        }

        const regionId = cb.data.replace("select_region_", "");
        const session = ctx.session as JobSearchSession;
        session.region = regionId;

        await ctx.answerCbQuery();

        try {
            const regions = await getHHRegions();

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ –≤ –¥–µ—Ä–µ–≤–µ
            const findRegion = (items: HHRegion[], id: string): HHRegion | null => {
                for (const item of items) {
                    if (String(item.id) === id) return item;
                    if (item.areas) {
                        const found = findRegion(item.areas, id);
                        if (found) return found;
                    }
                }
                return null;
            };

            const region = findRegion(regions as any, regionId);

            if (!region) {
                await ctx.reply("–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                return ctx.wizard.selectStep(2);
            }

            if (region.areas && region.areas.length > 0) {
                const keyboard = buildKeyboardButtons(
                    region.areas.map(a => ({
                        id: a.id,
                        name: a.name
                    })),
                    "select_subregion_",
                    2,
                    [{text: "üåç –í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã", data: "ALL"}]
                );

                await ctx.reply(
                    `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${region.name}\n\n` +
                    "–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ –∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º?",
                    keyboard
                );
                return ctx.wizard.next();
            } else {
                await ctx.reply(`–†–µ–≥–∏–æ–Ω "${region.name}" –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.`);
                return ctx.wizard.selectStep(4);
            }
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–µ–π:", err);
            await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–ª–∞—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return ctx.scene.leave();
        }
    },

    // –®–∞–≥ 4 ‚Äî –≤—ã–±–æ—Ä –ø–æ–¥—Ä–µ–≥–∏–æ–Ω–∞
    async (ctx) => {
        const cb = ctx.callbackQuery;
        if (!hasCallbackData(cb) || !cb.data.startsWith("select_subregion_")) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É.");
            return;
        }

        const subregionId = cb.data.replace("select_subregion_", "");
        const session = ctx.session as JobSearchSession;

        if (subregionId === "ALL") {
            await ctx.answerCbQuery("–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã");
            await ctx.reply("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.");
        } else {
            session.region = subregionId;
            await ctx.answerCbQuery();
            await ctx.reply("–û–±–ª–∞—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.");
        }

        return ctx.wizard.next();
    },

    // –®–∞–≥ 5 ‚Äî –≤—ã–±–æ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
    async (ctx) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞ —à–∞–≥
        if (!ctx.callbackQuery) {
            try {
                console.log("Fetching schedules from HH API...");
                const response = await axios.get("https://api.hh.ru/schedules");
                console.log("Schedules API response:", response.data);

                const schedules = response.data.map((s: any) => ({
                    id: s.id,
                    name: s.name
                }));

                console.log("Processed schedules:", schedules);

                const keyboard = buildKeyboardButtons(
                    schedules,
                    "select_schedule_",
                    2,
                    [{text: "‚ùå –ù–µ –≤–∞–∂–Ω–æ", data: "ANY"}]
                );

                console.log("Keyboard markup:", keyboard.reply_markup);

                await ctx.reply(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:",
                    keyboard
                );
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã:", err);
                await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                return ctx.scene.leave();
            }
            return;
        }

        const cb = ctx.callbackQuery;
        if (!hasCallbackData(cb) || !cb.data.startsWith("select_schedule_")) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É.");
            return;
        }

        const scheduleId = cb.data.replace("select_schedule_", "");
        const session = ctx.session as JobSearchSession;
        session.workSchedule = scheduleId === "ANY" ? undefined : scheduleId;

        await ctx.answerCbQuery();
        await ctx.reply(
            scheduleId === "ANY"
                ? "‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: –Ω–µ –≤–∞–∂–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏."
                : "‚úÖ –ì—Ä–∞—Ñ–∏–∫ –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏."
        );
        return ctx.wizard.next();
    },

    // –®–∞–≥ 6 ‚Äî –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    async (ctx) => {
        if (!ctx.callbackQuery) {
            try {
                const empRes = await axios.get("https://api.hh.ru/employments");
                const employments = empRes.data || [];

                const employmentOptions = employments.map((e: any) => ({
                    ...e,
                    name: e.name || `–¢–∏–ø: ${e.id}`
                }));

                const keyboard = buildKeyboardButtons(
                    employmentOptions,
                    "select_employment_",
                    2,
                    [{text: "‚ùå –ù–µ –≤–∞–∂–Ω–æ", data: "ANY"}]
                );

                await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", keyboard);
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", err);
                await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                return ctx.scene.leave();
            }
            return;
        }

        const cb = ctx.callbackQuery;
        if (!hasCallbackData(cb) || !cb.data.startsWith("select_employment_")) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É.");
            return;
        }

        const employmentId = cb.data.replace("select_employment_", "");
        const session = ctx.session as JobSearchSession;
        session.employmentType = employmentId === "ANY" ? undefined : employmentId;

        await ctx.answerCbQuery();
        await ctx.reply(
            employmentId === "ANY"
                ? "‚úÖ –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: –Ω–µ –≤–∞–∂–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å."
                : "‚úÖ –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å."
        );
        return ctx.wizard.next();
    },

    // –®–∞–≥ 7 ‚Äî –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    async (ctx) => {
        if (!ctx.callbackQuery) {
            try {
                const profRes = await axios.get("https://api.hh.ru/professional_areas");
                const profAreas = profRes.data || [];

                const areaOptions = profAreas.flatMap((group: any) =>
                    (group.categories || []).map((cat: any) => ({
                        id: cat.id,
                        name: cat.name,
                        title: cat.name
                    }))
                );

                const keyboard = buildKeyboardButtons(
                    areaOptions,
                    "select_profarea_",
                    1,
                    [{text: "‚ùå –ù–µ –≤–∞–∂–Ω–æ", data: "ANY"}]
                );

                await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å:", keyboard);
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–æ–±–ª–∞—Å—Ç–µ–π:", err);
                await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                return ctx.scene.leave();
            }
            return;
        }

        const cb = ctx.callbackQuery;
        if (!hasCallbackData(cb) || !cb.data.startsWith("select_profarea_")) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É.");
            return;
        }

        const profAreaId = cb.data.replace("select_profarea_", "");
        const session = ctx.session as JobSearchSession;
        session.professionalArea = profAreaId === "ANY" ? undefined : profAreaId;

        await ctx.answerCbQuery();
        await ctx.reply(
            profAreaId === "ANY"
                ? "‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –Ω–µ –≤–∞–∂–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):"
                : "‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):"
        );
        return ctx.wizard.next();
    },

    // –®–∞–≥ 8 ‚Äî –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    async (ctx) => {
        if (!ctx.message || !("text" in ctx.message)) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.");
            return;
        }

        const session = ctx.session as JobSearchSession;
        session.keywords = ctx.message.text.trim();

        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 9 ‚Äî —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∏ –ø–æ–∏—Å–∫
    async (ctx) => {
        if (!ctx.message || !("text" in ctx.message)) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'.");
            return;
        }

        const session = ctx.session as JobSearchSession;
        const coverLetter = ctx.message.text.trim();
        session.coverLetter = coverLetter === '-' ? undefined : coverLetter;

        try {
            const telegramId = ctx.from?.id;
            const payload = {
                telegramId,
                resumeId: session.selectedResumeId,
                region: session.region,
                workSchedule: session.workSchedule,
                employmentType: session.employmentType,
                professionalArea: session.professionalArea,
                keywords: session.keywords,
                coverLetter: session.coverLetter,
            };

            await ctx.reply("üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...");
            const vacancies = await searchVacancies(payload);

            if (!vacancies.length) {
                await ctx.reply("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            } else {
                await ctx.reply(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ 10:`);

                for (const v of vacancies.slice(0, 10)) {
                    try {
                        await ctx.replyWithMarkdown(
                            `*${v.name}*\n` +
                            `üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${v.employer?.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n` +
                            `üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${formatSalary(v.salary)}\n` +
                            `üìç –†–µ–≥–∏–æ–Ω: ${v.area?.name || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
                            `üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${v.published_at ? new Date(v.published_at).toLocaleDateString() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`,
                            Markup.inlineKeyboard([
                                Markup.button.url("üîó –û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", v.alternate_url || v.url || "#")
                            ])
                        );
                    } catch (e) {
                        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:", e);
                        await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏");
                    }
                    await new Promise(resolve => setTimeout(resolve, 300));
                }
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", e);
            await ctx.reply("üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }

        return ctx.scene.leave();
    }
);