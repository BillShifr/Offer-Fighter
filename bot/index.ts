import {Markup, Scenes, session, Telegraf} from "telegraf";
import * as dotenv from "dotenv";
import axios from "axios";
import {JobSearchContext, JobSearchSession} from "./types";

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN!;
const BACKEND_URL = process.env.BACKEND_URL!;

const bot = new Telegraf<JobSearchContext>(BOT_TOKEN);
const {WizardScene, Stage} = Scenes;

bot.use(session());

/**
 * Type-guard –¥–ª—è callbackQuery —Å data
 */
function hasCallbackData(q: any): q is { data: string } {
    return q && typeof q === "object" && "data" in q && typeof q.data === "string";
}

const jobSearchWizard = new WizardScene<JobSearchContext>(
    "job-search-wizard",

    // –®–∞–≥ 1 ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ
    async (ctx) => {
        const telegramId = ctx.from?.id;
        if (!telegramId) {
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.");
            return ctx.scene.leave();
        }

        try {
            const res = await axios.get(`${BACKEND_URL}/user/${telegramId}/resumes`);
            const resumes = res.data.items || [];

            if (!Array.isArray(resumes) || !resumes.length) {
                await ctx.reply("–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.");
                return ctx.scene.leave();
            }

            const buttons = resumes.map((r: any) =>
                Markup.button.callback(String(r.title || r.id), `select_resume_${r.id}`)
            );

            const keyboard = Markup.inlineKeyboard(
                buttons.reduce((acc: any[], btn: any, idx: number) => {
                    const i = Math.floor(idx / 2);
                    if (!acc[i]) acc[i] = [];
                    acc[i].push(btn);
                    return acc;
                }, [])
            );

            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ:", keyboard);
            return ctx.wizard.next();
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ:", err);
            await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return ctx.scene.leave();
        }
    },

    // –®–∞–≥ 2 ‚Äî –≤—ã–±–æ—Ä —Ä–µ–∑—é–º–µ (callbackQuery)
    async (ctx) => {
        const cb = ctx.callbackQuery;
        if (!hasCallbackData(cb) || !cb.data.startsWith("select_resume_")) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É.");
            return;
        }

        const selectedResumeId = cb.data.replace("select_resume_", "");
        const session = ctx.session as JobSearchSession;
        session.selectedResumeId = selectedResumeId;

        await ctx.answerCbQuery();
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 3 ‚Äî —Ä–µ–≥–∏–æ–Ω
    async (ctx) => {
        if (!ctx.message || typeof (ctx.message as any).text !== "string") {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–≥–∏–æ–Ω–∞/—Å—Ç—Ä–∞–Ω—ã.");
            return;
        }
        const session = ctx.session as JobSearchSession;
        session.region = (ctx.message as any).text.trim();

        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 4 ‚Äî –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
    async (ctx) => {
        if (!ctx.message || typeof (ctx.message as any).text !== "string") {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.");
            return;
        }
        const session = ctx.session as JobSearchSession;
        session.workSchedule = (ctx.message as any).text.trim();

        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 5 ‚Äî —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    async (ctx) => {
        if (!ctx.message || typeof (ctx.message as any).text !== "string") {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏.");
            return;
        }
        const session = ctx.session as JobSearchSession;
        session.employmentType = (ctx.message as any).text.trim();

        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 6 ‚Äî –ø—Ä–æ—Ñ. –æ–±–ª–∞—Å—Ç—å
    async (ctx) => {
        if (!ctx.message || typeof (ctx.message as any).text !== "string") {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å.");
            return;
        }
        const session = ctx.session as JobSearchSession;
        session.professionalArea = (ctx.message as any).text.trim();

        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 7 ‚Äî –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    async (ctx) => {
        if (!ctx.message || typeof (ctx.message as any).text !== "string") {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.");
            return;
        }
        const session = ctx.session as JobSearchSession;
        session.keywords = (ctx.message as any).text.trim();
        
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 8 ‚Äî —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∏ –ø–æ–∏—Å–∫
    async (ctx) => {
        if (!ctx.message || !("text" in ctx.message)) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ.");
            return;
        }

        const session = ctx.session as JobSearchSession;
        session.coverLetter = ctx.message.text.trim();

        try {
            const telegramId = ctx.from?.id;
            const payload = {
                telegramId,
                resumeId: session.selectedResumeId,
                region: session.region,
                workSchedule: session.workSchedule,
                employmentType: session.employmentType,
                professionalArea: session.professionalArea,
                keywords: session.keywords,
                coverLetter: session.coverLetter,
            };

            const res = await axios.post(`${process.env.BACKEND_URL}/search`, payload);
            const vacancies = res.data;

            if (!vacancies.length) {
                await ctx.reply("–í–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            } else {
                for (const v of vacancies) {
                    await ctx.replyWithMarkdown(
                        `*${v.position}*\n${v.company}\n${v.location}\n[–°—Å—ã–ª–∫–∞](${v.url})`
                    );
                }
            }
        } catch (e) {
            console.error(e);
            await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π.");
        }

        return ctx.scene.leave();
    }
);

const stage = new Stage<JobSearchContext>([jobSearchWizard]);
bot.use(stage.middleware());

// /start ‚Äî –≤—ã–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
bot.start(async (ctx) => {
    const firstName = ctx.from?.first_name || "–¥—Ä—É–≥";
    const authUrl = `${BACKEND_URL}/auth/hh?telegramId=${ctx.from?.id}`;

    await ctx.replyWithMarkdownV2(
        `üëã *–ü—Ä–∏–≤–µ—Ç, ${firstName}\\!*\\n\n` +
        `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã ‚Äî –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ hh\\.ru:`,
        Markup.inlineKeyboard([Markup.button.url("üöÄ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ hh.ru", authUrl)])
    );
});

// –±—ç–∫–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (callback "start_search").
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω—É
bot.action("start_search", async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π...");
    return ctx.scene.enter("job-search-wizard");
});

bot.command("search", (ctx) => ctx.scene.enter("job-search-wizard"));

bot.launch().then(() => console.log("Bot started")).catch(console.error);
