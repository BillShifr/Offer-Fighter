import { Telegraf, Markup, Scenes, session } from "telegraf";
import dotenv from "dotenv";
import axios from "axios";

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const { WizardScene, Stage } = Scenes;

bot.use(session());

// –®–∞–≥–∏ –≤–æ—Ä–∫—Ñ–ª–æ—É
const jobSearchWizard = new WizardScene(
    "job-search-wizard",

    // –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å backend)
    async (ctx) => {
        const telegramId = ctx.from.id;
        try {
            // –ó–∞–ø—Ä–æ—Å –Ω–∞ backend, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
            const res = await axios.get(`${process.env.BACKEND_URL}/user/${telegramId}/resumes`);
            const resumes = res.data; // –æ–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä [{id, title}, ...]

            if (!resumes.length) {
                await ctx.reply("–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.");
                return ctx.scene.leave();
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—é–º–µ
            const buttons = resumes.map(r =>
                Markup.button.callback(r.title, `select_resume_${r.id}`)
            );

            // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
            const keyboard = Markup.inlineKeyboard(
                buttons.reduce((resultArray, item, index) => {
                    const chunkIndex = Math.floor(index/2);

                    if(!resultArray[chunkIndex]) {
                        resultArray[chunkIndex] = [];
                    }

                    resultArray[chunkIndex].push(item);
                    return resultArray;
                }, [])
            );

            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ:", keyboard);

            return ctx.wizard.next();

        } catch (err) {
            console.error(err);
            await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return ctx.scene.leave();
        }
    },

    // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ä–µ–∑—é–º–µ
    async (ctx) => {
        if (!ctx.callbackQuery?.data?.startsWith("select_resume_")) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É.");
            return;
        }

        const selectedResumeId = ctx.callbackQuery.data.replace("select_resume_", "");
        ctx.session.selectedResumeId = selectedResumeId;

        await ctx.answerCbQuery(); // –£–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        await ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∑—é–º–µ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 3: –í–≤–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞
    async (ctx) => {
        if (!ctx.message?.text) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–≥–∏–æ–Ω–∞/—Å—Ç—Ä–∞–Ω—ã.");
            return;
        }

        ctx.session.region = ctx.message.text.trim();
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å, –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 4: –í–≤–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
    async (ctx) => {
        if (!ctx.message?.text) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã.");
            return;
        }

        ctx.session.workSchedule = ctx.message.text.trim();
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, —á–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 5: –í–≤–æ–¥ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    async (ctx) => {
        if (!ctx.message?.text) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏.");
            return;
        }

        ctx.session.employmentType = ctx.message.text.trim();
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, IT, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 6: –í–≤–æ–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    async (ctx) => {
        if (!ctx.message?.text) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å.");
            return;
        }

        ctx.session.professionalArea = ctx.message.text.trim();
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 7: –í–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    async (ctx) => {
        if (!ctx.message?.text) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.");
            return;
        }

        ctx.session.keywords = ctx.message.text.trim();
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ:");
        return ctx.wizard.next();
    },

    // –®–∞–≥ 8: –í–≤–æ–¥ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    async (ctx) => {
        if (!ctx.message?.text) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ.");
            return;
        }

        ctx.session.coverLetter = ctx.message.text.trim();

        // –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ backend –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–ø–æ–∏—Å–∫–∞
        try {
            const telegramId = ctx.from.id;
            const payload = {
                telegramId,
                resumeId: ctx.session.selectedResumeId,
                region: ctx.session.region,
                workSchedule: ctx.session.workSchedule,
                employmentType: ctx.session.employmentType,
                professionalArea: ctx.session.professionalArea,
                keywords: ctx.session.keywords,
                coverLetter: ctx.session.coverLetter,
            };

            const res = await axios.post(`${process.env.BACKEND_URL}/search`, payload);
            const vacancies = res.data; // –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º –º–∞—Å—Å–∏–≤ –≤–∞–∫–∞–Ω—Å–∏–π

            if (!vacancies.length) {
                await ctx.reply("–í–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.");
            } else {
                for (const v of vacancies) {
                    await ctx.replyWithMarkdown(
                        `*${v.position}*\n${v.company}\n${v.location}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é](${v.url})`
                    );
                }
            }
        } catch (e) {
            console.error(e);
            await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }

        return ctx.scene.leave();
    }
);

const stage = new Stage([jobSearchWizard]);
bot.use(stage.middleware());

// –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
bot.start(async (ctx) => {
    const firstName = ctx.from.first_name || "–¥—Ä—É–≥";
    const authUrl = `${process.env.BACKEND_URL}/auth/hh?telegramId=${ctx.from.id}`;

    await ctx.replyWithMarkdownV2(
        `üëã *–ü—Ä–∏–≤–µ—Ç, ${firstName}\\!*\n\n` +
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã –Ω–∞ hh\\.ru\\.\n` +
        `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –Ω–∞ hh\\.ru, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è –ª—É—á—à–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\\.`,
        Markup.inlineKeyboard([
            Markup.button.url("üöÄ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ hh.ru", authUrl),
            Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")
        ])
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —à–∞–≥–∞–º
bot.command("search", (ctx) => ctx.scene.enter("job-search-wizard"));

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.command("test", (ctx) => ctx.reply("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ –¥–ª—è ${ctx.updateType}`, err);
});

bot.launch().then(() => console.log("Telegram bot started"));

bot.command('subscribe', async (ctx) => {
    const telegramId = ctx.from.id;

    try {
        const res = await axios.post(`${process.env.BACKEND_URL}/payment/create`, {
            telegramId,
            amount: 299, // —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä
        });

        const { paymentUrl } = res.data;
        await ctx.reply(`–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n${paymentUrl}`);
    } catch (e) {
        console.error(e);
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});
